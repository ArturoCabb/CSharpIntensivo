docker pull <imagen>
docker container ls // Paa ver los contenedores corriendo
docker container ls -a // Para ver todos los contenedores
docker container rm <container ID>
docker container prun // elimina todos los contenedores
docker image rm <image Name>
docker run -d <imagen> // Desenlazado de la consola
docker container stop <container ID>
docker run -dp <puerto> <imagen>
docker container rm -f <container ID|> // Borra el contenedor
docker image rm <image Name>
docker container run \
--name postgres-alpha \
-e POSTGRES_PASSWORD=mypass1 \
-dp 5432:5432 \
postgres:<version de la imagen>

docker container logs <container ID>
docker volume create world-db
 docker volume rm // Para borrar un volumen

docker container run \
--name postgres-alpha \
-e POSTGRES_PASSWORD=mypass1 \
-dp 5432:5432 \
--volume <nombre Volumen>:/var/lib/mysql \
postgres:<version de la imagen>

// para montar phpmyadmin
docker container run \
--name phpmyadmin \
-d \
-e PMA_ARBITRARY=1 \
-p 8080:80 \
phpmyadmin:<version>

// Para que varios contenedores puedan hablar entre ellos se crea una red
docker network ls
docker network inspect <nombre-red>
docker network prune // para purgar todas las redes
docker network create <nombre-red>
docker network connect <nombre-red> <contenedor-ID>

// para montar un contenedor con una red
docker container run \
--name postgres-alpha \
-e POSTGRES_PASSWORD=mypass1 \
-dp 5432:5432 \
--volume <nombre Volumen>:/var/lib/mysql \
-- network <nombre-red> \
postgres:<version de la imagen>

// Enlace de carpeta y correr comando de instalacion. (Nota es como si hiciera mvn clean install)
docker container run \
--name nest-app \
-w /app \
-p 80:3000 \
-v "$(pwd)":/app \
node:<version> \
sh -c "yarn install && yarn start:dev"

docker exec -it <contenedor-ID> /bin/sh // Esto me permite entrar al shell del contenedor
docker compose up // dónde está el yml para iniciar a correrlo
docker compose down // Borra todo
// Por si algo ocurre
sudo chown -R 5050:5050 pgadmin

docker buildx

docker build --tag <nombre> ./

// Se puede crear un docker compose que guarde un yml como el siguiente
// nombre docker-compose.yml
version: '3'
services:
db:
	container_name: postgres_database
	image: postgres:15.1
	volumes:
		#- postgres-db:/var/lib/postgresql/data #Ejemplo
		- ./postgres:/var/lib/postgresql/data
	environment:
		- POSTGRES_PASSWORD=123456
		
	pgAdmin:
		depends_on:
			- serviceName
		image: imageName
		ports:
			- "8080:80
		volumes:
			- ./pgadmin:/var/lib/pgadmin
		environment:
			- PGADMIN_DEFAULT_PASSWORD=123456
			- PGADMIN_DEFAULT_EMAIL=@emal.com
volumes:
	<nombre-volumen>:
	// Si ya existe el volumen
	external: true
	
// el env es para las variables de entorno
// Otro ejemplo con mongo
version: '3'
services:
	db:
		container_name: ${MONGO_DB_NAME}
		image: mongo:6.0
		volumes:
			- poke-vol:/data/db
		ports:
			- 27017:27017
		restart: always
		environment:
			-<variable de entorno>: <nombre-variable-entorno>
		command: ['--auth']
		
	mongo-express:
		depends_on:
			-db
		image: mongo-express:<version>
		environment:
			ME_CONFIG_MONGODB_ADMINUSERNAME: ${MONGO_USERNAME}
		ports:
			-8080:8081
		restart: always
			
volumes:
	poke-vol:
		external: false
		
// En el archivo .env que es para las variables de entorno
MONGO_USERNAME=
MONGO_PASSWORD=
MONGO_DB_NAME=

// dockerfile
FROM <imagen-que-importamos>

WORKFIR /app
COPY source dest
RUN <comando a ejecutar>
CMD ["<comando-ejecutar>", "<por-si-ingresa-parametros>"]

